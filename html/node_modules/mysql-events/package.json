{
  "name": "mysql-events",
  "version": "0.0.7",
  "description": "A node.js package that watches a MySQL database and runs callbacks on matched events like updates on tables and/or specific columns.",
  "homepage": "https://github.com/spencerlambert/mysql-events",
  "keywords": [
    "mysql",
    "events",
    "trigger",
    "notify",
    "watcher",
    "callbacks"
  ],
  "author": {
    "name": "Spencer Lambert",
    "email": "spence@wisptools.com",
    "url": "http://wisptools.com"
  },
  "contributors": [
    {
      "name": "sirhanshafahath",
      "email": "sirhan@wisptools.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:spencerlambert/mysql-events.git"
  },
  "main": "index.js",
  "dependencies": {
    "underscore": "1.8.3",
    "zongji": "0.3.2"
  },
  "scripts": {
    "test": ""
  },
  "license": "MIT",
  "files": [
    "index.js",
    "LICENSE",
    "README.md"
  ],
  "readme": "# mysql-events\nA node meteor package that watches a MySQL database and runs callbacks on matched events.\n\nThis package is based on the [ZongJi](https://github.com/nevill/zongji) node module. Please make sure that you meet the requirements described at [ZongJi](https://github.com/nevill/zongji), like MySQL binlog etc.\n\n#Quick Start\n```javascript\nvar MySQLEvents = require('mysql-events');\nvar dsn = {\n  host:     _dbhostname_,\n  user:     _dbusername_,\n  password: _dbpassword_,\n};\nvar mysqlEventWatcher = MySQLEvents(dsn);\nvar watcher =mysqlEventWatcher.add(\n  'myDB.table.field.value',\n  function (oldRow, newRow) {\n     //row inserted\n    if (oldRow === null) {\n      //insert code goes here\n    }\n\n     //row deleted\n    if (newRow === null) {\n      //delete code goes here\n    }\n\n     //row updated\n    if (oldRow !== null && newRow !== null) {\n      //update code goes here\n    }\n  }, \n  'match this string or regex'\n);\n```\n\n#Installation\n```sh\nnpm install mysql-events\n```\n\n#Usage\n- Import the module into your application\n```javascript\nvar MySQLEvents = require('mysql-events');\n```\n\n- Instantiate and create a database connection\n```sh\nvar dsn = {\n  host:     'localhost',\n  user:     'username',\n  password: 'password'\n};\nvar myCon = MySQLEvents(dsn);\n```\n\nMake sure the database user has the privilege to read the binlog on database that you want to watch on.\n\n- Use the returned object to add new watchers\n```sh\nvar event1 = myCon.add(\n  'dbName.tableName.fieldName.value',\n  function (oldRow, newRow) {\n    //code goes here\n  }, \n  'Active'\n);\n```\n\nThis will listen to any change in the _fieldName_ and if the changed value is equal to __Active__, then triggers the callback. Passing it 2 arguments. Argument value depends on the event.\n\n- Insert: oldRow = null, newRow = rowObject\n- Update: oldRow = rowObject, newRow = rowObject\n- Delete: oldRow = rowObject, newRow = null\n\n###rowObject\nIt has the following structure:\n\n```\n{\n  database: dbName,\n  table: tableName,\n  affectedColumns: {\n    [{\n      name:     fieldName1,\n      charset:  String,\n      type:     Number\n      metedata: String\n    },{\n      name:     fieldName2,\n      charset:  String,\n      type:     Number\n      metedata: String\n    }]\n},{\n  changedColumns: [fieldName1, fieldName2],\n  fields: {\n   fieldName1: recordValue1,\n   fieldName2: recordValue2,\n     ....\n     ....\n     ....\n   fieldNameN: recordValueN\n  }\n}\n```\n\n##Remove an event\n```\nevent1.remove();\n```\n\n##Stop all events on the connection\n```\nmyCon.stop();\n```\n\n#Watcher Setup\nIts basically a dot '.' seperated string. It can have the following combinations\n\n- _database_: watches the whole database for changes (insert/update/delete). Which table and row are affected can be inspected from the oldRow & newRow\n- _database.table_: watches the whole table for changes. Which rows are affected can be inspected from the oldRow & newRow\n- _database.table.column_: watches for changes in the column. Which database, table & other changed columns can be inspected from the oldRow & newRow\n- _database.table.column.value_: watches for changes in the column and only trigger the callback if the changed value is equal to the 3rd argument passed to the add().\n- _database.table.column.regexp_: watches for changes in the column and only trigger the callback if the changed value passes a regular expression test to the 3rd argument passed to the add(). The 3rd argument must be a Javascript Regular Expression Object, like, if you want to match for a starting sting (eg: MySQL) in the value, use /MySQL/i. This will trigger the callback only if the new value starts with MySQL\n\n#LICENSE\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spencerlambert/mysql-events/issues"
  },
  "_id": "mysql-events@0.0.7",
  "dist": {
    "shasum": "55272da84b62855a66c8c246188e4afb5ce04937"
  },
  "_from": "mysql-events@",
  "_resolved": "https://registry.npmjs.org/mysql-events/-/mysql-events-0.0.7.tgz"
}
