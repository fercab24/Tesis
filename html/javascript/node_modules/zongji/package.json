{
  "name": "zongji",
  "version": "0.3.2",
  "description": "A mysql binlog listener running on Node.js",
  "main": "index.js",
  "engines": {
    "node": "0.10"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "nodeunit --reporter=minimal test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nevill/zongji"
  },
  "keywords": [
    "mysql",
    "binlog"
  ],
  "author": {
    "name": "Nevill",
    "email": "nevill.dutt@gmail.com"
  },
  "contributors": [
    {
      "name": "numtel",
      "email": "ben@latenightsketches.com",
      "url": "https://github.com/numtel"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/nevill/zongji/issues"
  },
  "homepage": "https://github.com/nevill/zongji",
  "devDependencies": {
    "nodeunit": "~0.9.0"
  },
  "dependencies": {
    "mysql": "~2.5.5"
  },
  "readme": "# ZongJi [![Build Status](https://travis-ci.org/nevill/zongji.svg?branch=master)](https://travis-ci.org/nevill/zongji)\nA MySQL binlog listener running on Node.js.\n\nZongJi (踪迹) is pronounced as `zōng jì` in Chinese.\n\nThis package is a \"pure JS\" implementation based on [`node-mysql`](https://github.com/felixge/node-mysql). Since v0.2.0, The native part (which was written in C++) has been dropped.\n\nThis package has been tested with MySQL server 5.5.40 and 5.6.19. All MySQL server versions >= 5.1.15 are supported.\n\n## Quick Start\n\n```javascript\nvar zongji = new ZongJi({ /* ... MySQL Connection Settings ... */ });\n\n// Each change to the replication log results in an event\nzongji.on('binlog', function(evt) {\n  evt.dump();\n});\n\n// Binlog must be started, optionally pass in filters\nzongji.start({\n  includeEvents: ['tablemap', 'writerows', 'updaterows', 'deleterows']\n});\n```\n\nFor a complete implementation see [`example.js`](example.js)...\n\n## Installation\n\n* Requires Node.js v0.10+\n\n  ```bash\n  $ npm install zongji\n  ```\n\n* Enable MySQL binlog in `my.cnf`, restart MySQL server after making the changes.\n  > From [MySQL 5.6](https://dev.mysql.com/doc/refman/5.6/en/replication-options-binary-log.html), binlog checksum is enabled by default. Zongji can work with it, but it doesn't really verify it.\n\n  ```\n  # binlog config\n  server-id        = 1\n  log_bin          = /var/log/mysql/mysql-bin.log\n  expire_logs_days = 10            # optional\n  max_binlog_size  = 100M          # optional\n\n  # Very important if you want to receive write, update and delete row events\n  binlog_format    = row\n  ```\n* Create an account with replication privileges, e.g. given privileges to account `zongji` (or any account that you use to read binary logs)\n\n  ```sql\n  GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'zongji'@'localhost'\n  ```\n\n## ZongJi Class\n\nThe `ZongJi` constructor accepts one argument: an object containg MySQL connection details in the same format as used by `node-mysql`.\n\nEach instance includes the following methods:\n\nMethod Name | Arguments | Description\n------------|-----------|------------------------\n`start`     | `options` | Start receiving replication events\n`stop`      | *None*    | Disconnect from MySQL server, stop receiving events\n`set`       | `options` | Change options after `start()`\n`on`        | `eventName`, `handler` | Add a listener to the `binlog` or `error` event. Each handler function accepts one argument.\n\n**Options available:**\n\nOption Name | Type | Description\n------------|------|-------------------------------\n`serverId`  | `integer` | [Unique number (1 - 2<sup>32</sup>)](http://dev.mysql.com/doc/refman/5.0/en/replication-options.html#option_mysqld_server-id) to identify this replication slave instance. Must be specified if running more than one instance of ZongJi. Must be used in `start()` method for effect.<br>**Default:** `1`\n`startAtEnd` | `boolean` | Pass `true` to only emit binlog events that occur after ZongJi's instantiation. Must be used in `start()` method for effect.<br>**Default:** `false`\n`includeEvents` | `[string]` | Array of event names to include<br>**Example:** `['writerows', 'updaterows', 'deleterows']`\n`excludeEvents` | `[string]` | Array of event names to exclude<br>**Example:** `['rotate', 'tablemap']`\n`includeSchema` | `object` | Object describing which databases and tables to include (Only for row events). Use database names as the key and pass an array of table names or `true` (for the entire database).<br>**Example:** ```{ 'my_database': ['allow_table', 'another_table'], 'another_db': true }```\n`excludeSchema` | `object` | Object describing which databases and tables to exclude (Same format as `includeSchema`)<br>**Example:** ```{ 'other_db': ['disallowed_table'], 'ex_db': true }```\n\n* By default, all events and schema are emitted.\n* `excludeSchema` and `excludeEvents` take precedence over `includeSchema` and `includeEvents`, respectively.\n\n**Supported Events:**\n\nEvent name  | Description\n------------|---------------\n`unknown`   | Catch any other events\n`query`     | [Insert/Update/Delete Query](http://dev.mysql.com/doc/internals/en/query-event.html)\n`rotate`    | [New Binlog file](http://dev.mysql.com/doc/internals/en/rotate-event.html) (not required to be included to rotate to new files)\n`format`    | [Format Description](http://dev.mysql.com/doc/internals/en/format-description-event.html)\n`xid`       | [Transaction ID](http://dev.mysql.com/doc/internals/en/xid-event.html)\n`tablemap`  | Before any row event (must be included for any other row events)\n`writerows` | Rows inserted\n`updaterows` | Rows changed\n`deleterows` | Rows deleted\n\n**Event Methods**\n\nNeither method requires any arguments.\n\nName   | Description\n-------|---------------------------\n`dump` | Log a description of the event to the console\n`getEventName` | Return the name of the event\n\n## Important Notes\n\n* :star2: [All types allowed by `node-mysql`](https://github.com/felixge/node-mysql#type-casting) are supported by this package.\n* :speak_no_evil: While 64-bit integers in MySQL (`BIGINT` type) allow values in the range of 2<sup>64</sup> (± ½ × 2<sup>64</sup> for signed values), Javascript's internal storage of numbers limits values to 2<sup>53</sup>, making the allowed range of `BIGINT` fields only `-9007199254740992` to `9007199254740992`. Unsigned 64-bit integers must also not exceed `9007199254740992`.\n* :point_right: `TRUNCATE` statement does not cause corresponding `DeleteRows` event. Use unqualified `DELETE FROM` for same effect.\n* When using fractional seconds with `DATETIME` and `TIMESTAMP` data types in MySQL > 5.6.4, only millisecond precision is available due to the limit of Javascript's `Date` object.\n\n## Run Tests\n\n* Configure MySQL in `test/settings/mysql.js`\n* Run `npm test`\n\n## Reference\n\nI learnt many things from following resources while making ZongJi.\n\n* https://github.com/felixge/node-mysql\n* https://github.com/felixge/faster-than-c/\n* http://intuitive-search.blogspot.co.uk/2011/07/binary-log-api-and-replication-listener.html\n* https://github.com/Sannis/node-mysql-libmysqlclient\n* https://kkaefer.com/node-cpp-modules/\n* http://dev.mysql.com/doc/internals/en/replication-protocol.html\n* http://www.cs.wichita.edu/~chang/lecture/cs742/program/how-mysql-c-api.html\n* https://github.com/jeremycole/mysql_binlog (Ruby implemenation of MySQL binlog parser)\n* http://dev.mysql.com/doc/internals/en/date-and-time-data-type-representation.html\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "zongji@0.3.2",
  "dist": {
    "shasum": "b33a51885543371b655e4d2d9a7c8e2de060ac33"
  },
  "_from": "zongji@",
  "_resolved": "https://registry.npmjs.org/zongji/-/zongji-0.3.2.tgz"
}
